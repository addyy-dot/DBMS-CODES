-- Create the database if it does not exist and use it
CREATE DATABASE IF NOT EXISTS ProductDB;
USE ProductDB;

-- Drop the Product table if it exists and create a new one
DROP TABLE IF EXISTS Product;
CREATE TABLE IF NOT EXISTS Product (
    ProductID INT PRIMARY KEY,          -- ProductID as the primary key for uniqueness
    ProductName VARCHAR(50),            -- ProductName to store the name of the product
    Price DECIMAL(10, 2)                -- Price to store the price of the product with 2 decimal precision
);

-- Insert product records into the Product table
INSERT IGNORE INTO Product (ProductID, ProductName, Price) VALUES
(1, 'ProductA', 500),             -- ProductA with price 500
(2, 'ProductB', 1500),            -- ProductB with price 1500
(3, 'ProductC', 1200),            -- ProductC with price 1200
(4, 'ProductD', 800);             -- ProductD with price 800

-- Drop the procedure if it already exists
DROP PROCEDURE IF EXISTS CalculateDiscount;

-- Set the delimiter to // for defining the stored procedure
DELIMITER //

-- Create the stored procedure to calculate discounts based on price
CREATE PROCEDURE CalculateDiscount()
BEGIN
    DECLARE p_id INT;               -- Declare variable to store product ID
    DECLARE p_name VARCHAR(50);     -- Declare variable to store product name
    DECLARE p_price DECIMAL(10, 2); -- Declare variable to store product price
    DECLARE p_discount DECIMAL(10, 2); -- Declare variable to store calculated discount
    DECLARE done INT DEFAULT 0;      -- Declare variable to control the loop

    -- Declare a cursor to fetch product details from the Product table
    DECLARE product_cursor CURSOR FOR
        SELECT ProductID, ProductName, Price FROM Product;

    -- Declare a handler to set the 'done' variable to 1 when there are no more rows to fetch
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    -- Open the cursor to start fetching product data
    OPEN product_cursor;

    -- Loop through all the products fetched by the cursor
    read_loop: LOOP
        FETCH product_cursor INTO p_id, p_name, p_price;  -- Fetch each product's ID, name, and price

        IF done THEN  -- If no more products to fetch, exit the loop
            LEAVE read_loop;
        END IF;

        -- Calculate discount based on the product price
        IF p_price < 1000 THEN
            SET p_discount = 100; -- Discount is 100 for products with price less than 1000
        ELSE
            SET p_discount = 200; -- Discount is 200 for products with price 1000 or more
        END IF;

        -- Display the product name, price, and calculated discount
        SELECT p_name AS ProductName, p_price AS Price, p_discount AS Discount;
    END LOOP;

    -- Close the cursor once all products have been processed
    CLOSE product_cursor;
END //

-- Restore the delimiter to default
DELIMITER ;

-- Call the stored procedure to calculate and display the discount for all products
CALL CalculateDiscount();
