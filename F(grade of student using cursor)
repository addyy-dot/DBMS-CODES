-- Create the database if it doesn't already exist
CREATE DATABASE IF NOT EXISTS StudentDB;
USE StudentDB;

-- Drop the Student table if it exists to avoid conflicts
DROP TABLE IF EXISTS Student;

-- Create the Student table to store student information
CREATE TABLE IF NOT EXISTS Student (
    StudentID INT PRIMARY KEY,              -- Student ID
    StudentName VARCHAR(50),                -- Student Name
    Percentage DECIMAL(5,2)                 -- Percentage of the student
);

-- Insert sample student data into the Student table
INSERT IGNORE INTO Student (StudentID, StudentName, Percentage) VALUES
(1, 'John', 38.5),
(2, 'Alice', 45.0),
(3, 'Bob', 55.0),
(4, 'Charlie', 65.0),
(5, 'David', 72.0);

-- Drop the stored procedure if it already exists
DROP PROCEDURE IF EXISTS GetStudentGrades;

-- Define the delimiter to support multi-line stored procedures
DELIMITER //

-- Create the stored procedure to determine the grade of each student
CREATE PROCEDURE GetStudentGrades()
BEGIN
    -- Declare variables to store student data and grade information
    DECLARE done INT DEFAULT 0;
    DECLARE v_student_id INT;
    DECLARE v_student_name VARCHAR(50);
    DECLARE v_percentage DECIMAL(5,2);
    DECLARE v_grade VARCHAR(20);
    
    -- Declare a cursor to select student data (ID, Name, Percentage) from the Student table
    DECLARE student_cursor CURSOR FOR
        SELECT StudentID, StudentName, Percentage
        FROM Student;

    -- Declare a handler to exit the loop when no more records are found
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    -- Open the cursor to start fetching student data
    OPEN student_cursor;

    -- Loop through the cursor to process each student record
    read_loop: LOOP
        -- Fetch the next student record into the declared variables
        FETCH student_cursor INTO v_student_id, v_student_name, v_percentage;

        -- Exit the loop if there are no more records
        IF done THEN
            LEAVE read_loop;
        END IF;

        -- Determine the grade based on the percentage
        IF v_percentage <= 40 THEN
            SET v_grade = 'Pass';
        ELSEIF v_percentage > 40 AND v_percentage <= 50 THEN
            SET v_grade = 'II';
        ELSEIF v_percentage > 50 AND v_percentage <= 60 THEN
            SET v_grade = 'Higher II';
        ELSE
            SET v_grade = 'I';
        END IF;

        -- Output the student's name, percentage, and grade
        SELECT v_student_name AS StudentName, v_percentage AS Percentage, v_grade AS Grade;
    END LOOP;

    -- Close the cursor after processing all records
    CLOSE student_cursor;
END //

-- Reset the delimiter back to the default
DELIMITER ;

-- Call the stored procedure to execute and display the results
CALL GetStudentGrades();
