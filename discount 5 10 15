-- Create the database if it doesn't exist
CREATE DATABASE IF NOT EXISTS ProductDB;
USE ProductDB;

-- Create the Product table
CREATE TABLE IF NOT EXISTS Product (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(100) NOT NULL,
    Price DECIMAL(10,2) CHECK (Price > 0)
);

-- Insert sample data into Product table
INSERT IGNORE INTO Product (ProductID, ProductName, Price) VALUES
(1, 'ProductA', 4500),
(2, 'ProductB', 8000),
(3, 'ProductC', 12000);

-- Procedure to calculate discounted price
DELIMITER //

CREATE PROCEDURE CalculateDiscountedPrice()
BEGIN
    DECLARE p_id INT;
    DECLARE p_name VARCHAR(100);
    DECLARE p_price DECIMAL(10, 2);
    DECLARE p_discounted_price DECIMAL(10, 2);
    DECLARE done INT DEFAULT 0;  -- Declare the 'done' variable
    
    -- Declare a cursor to fetch all products
    DECLARE product_cursor CURSOR FOR 
        SELECT ProductID, ProductName, Price FROM Product;
    
    -- Declare handler to exit the loop when no more rows are found
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;
    
    OPEN product_cursor;

    read_loop: LOOP
        FETCH product_cursor INTO p_id, p_name, p_price;
        
        -- Exit the loop if no more rows are fetched
        IF done THEN
            LEAVE read_loop;
        END IF;

        -- Apply discount based on price conditions
        IF p_price < 5000 THEN
            SET p_discounted_price = p_price * 0.95;  -- 5% discount
        ELSEIF p_price BETWEEN 5000 AND 10000 THEN
            SET p_discounted_price = p_price * 0.90;  -- 10% discount
        ELSE
            SET p_discounted_price = p_price * 0.85;  -- 15% discount
        END IF;

        -- Output the product details with the discounted price
        SELECT p_name AS ProductName, p_price AS OriginalPrice, p_discounted_price AS DiscountedPrice;
    END LOOP;

    CLOSE product_cursor;
END //

DELIMITER ;

-- Call the procedure to calculate and display discounted prices
CALL CalculateDiscountedPrice();
